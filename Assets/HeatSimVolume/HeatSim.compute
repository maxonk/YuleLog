#pragma kernel simulate
#pragma kernel insert
#pragma kernel clearLogVol
#pragma kernel testData

RWTexture3D<float4> HeatSimVolumeNext;
Texture3D<float4> HeatSimVolumeLast; //255
RWTexture3D<float4> LogInsertionVolumeRW;
Texture2D<float4> NoiseTex;
SamplerState samplerHeatSimVolumeLast, samplerNoiseTex;
RWStructuredBuffer<float4> newPoints, newVelocity; //length 256 
float _Time, _dTime;
float4 Wind;

#define VOL_SIZE 128.0
#define INV_VOL_SIZE (1.0 / VOL_SIZE)

float4 Sample(Texture3D<float4> tex, SamplerState ss, float3 p) {
	return tex.SampleLevel(ss, saturate(p * float3(INV_VOL_SIZE, INV_VOL_SIZE, INV_VOL_SIZE)), 0);
}

#define AMBIENT_HEAT 0.4
#define MAX_HEAT 1.075
#define MAX_VELOCITY float3(60, 60, 60)
#define AMBIENT_WIND_SCALE float3(45, 15, 45)

[numthreads(1,1,1)]
void simulate(uint3 id : SV_DispatchThreadID) {
     
    //compute HeatSimVolume from HeatSimVolumeLast neighbors
    if(id.y > 0 && id.y < (VOL_SIZE - 1)){
		// move to sample space from world right away and do ops here. this is bad and we should undo maybe if we can afford the ops? - it squashes velocity in the vertical i think...
        float3 p = (float3)id.xyz + float3(0.5, 0.5, 0.5);
        
		//get our current data from the texture
        float4 velocityHeat = Sample(HeatSimVolumeLast, samplerHeatSimVolumeLast, p); 
		 
		//OUTSIDE ADDITION
		float4 newVH = LogInsertionVolumeRW[id.xyz];
		LogInsertionVolumeRW[id.xyz] = float4(0,0,0,0);
		velocityHeat.xyz += newVH.xyz;
		velocityHeat.a += newVH.a;

		//BACKGROUND HEAT / MAX HEAT
		velocityHeat.a = clamp(velocityHeat.a, AMBIENT_HEAT, MAX_HEAT);
		
		//WIND 
		float3 v = velocityHeat.xyz + _dTime * float3(0.25, 1, 0.25) * //time scaled
			Wind// - velocityHeat.xyz) //direction + distance from current v to target environmental v (wind)
			* 1; //constant factor 

		//ADVECTION
        //evolve forward to get the naive estimation
		float3 samplePos = p - v * _dTime;
        float4 fwdEvolvedVelocityHeat = Sample(HeatSimVolumeLast, samplerHeatSimVolumeLast, samplePos);

		//move forward and then back and then see what the difference is - that's our error sampling position
		samplePos = (samplePos // fast forward 
							+ fwdEvolvedVelocityHeat.xyz * _dTime * 1.0); // rewind
		
		//the error is accumulated over 2 timesteps so cut it in half and that's our correction
		float4 correctedForwardVH =  
			fwdEvolvedVelocityHeat - (
				(Sample(HeatSimVolumeLast, samplerHeatSimVolumeLast, samplePos) //fwd evolved then back projected VH
				- float4(v, velocityHeat.a)) / 2.0 //diff / 2 = correction
			); 
			
		//HEAT = UPWARD ACCELERATION  
		correctedForwardVH.y += _dTime * //time scaled  
			((correctedForwardVH.a - AMBIENT_HEAT) * 45.0); /// (correctedForwardFS.y)  // force here is heat * constant
					
		//COOLING
		correctedForwardVH.a -= _dTime * //time scaled  
			pow(
				saturate(correctedForwardVH.a - AMBIENT_HEAT / (MAX_HEAT - AMBIENT_HEAT)), 
				4) //pow curve height - this is a constant suggested by nvidia
			* 150.0; //constant factor

			
		
		//clamping ranges
		correctedForwardVH.xyz = min(correctedForwardVH.xyz, MAX_VELOCITY);
		correctedForwardVH.a = clamp(correctedForwardVH.a, AMBIENT_HEAT, MAX_HEAT);

		//aaaand write out to texture
        HeatSimVolumeNext[id.xyz] = correctedForwardVH;
    }    
} 

//REGION -- INSERTION ------------------------------------------------------------------------------------------------

#define INSERTION_SCALE 4

#define P_INFLUENCE_DIST_MAX 1.5
#define P_INFLUENCE_DIST_MIN 0.5
float pInfluence(float distToP){
	return 
		(1 - //invert
			saturate( //remap my distance from 1.0-->2.8 space to 0.0-->1.0 space
				(distToP - P_INFLUENCE_DIST_MIN) / (P_INFLUENCE_DIST_MAX - P_INFLUENCE_DIST_MIN)
			)
		);
}

void insert(int3 index, float3 pos, float3 velocity, float heat){
	LogInsertionVolumeRW[index] += 
		float4(velocity, heat) * pInfluence(distance(float3(index), pos));
}

void insertXRow(int3 index, float3 pos, float3 velocity, float heat){
	index.x -= INSERTION_SCALE;
	insert(index, pos, velocity, heat);
	for(int i = 0; i < INSERTION_SCALE * 2; i++) {
		index.x++;
		insert(index, pos, velocity, heat);
	}
	index.x -= INSERTION_SCALE;
}

void insertXYQuad(int3 index, float3 pos, float3 velocity, float heat){
	index.y -= INSERTION_SCALE;
	insertXRow(index, pos, velocity, heat);
	for(int i = 0; i < INSERTION_SCALE * 2; i++){
		index.y++;
		insertXRow(index, pos, velocity, heat);
	}
	index.y -= INSERTION_SCALE; 
}

[numthreads(1,1,1)]
void insert(uint3 id : SV_DispatchThreadID) {
	//instead of just points, can we do actual geo? or like the full node map with connections and fill between them?
	int3 index = round(newPoints[id.x].xyz);

	index.z -= INSERTION_SCALE;
	insertXYQuad(index, newPoints[id.x].xyz, newVelocity[id.x].xyz, newPoints[id.x].a); 
	for(int i = 0; i < INSERTION_SCALE * 2; i++){
		index.z++;
		insertXYQuad(index, newPoints[id.x].xyz, newVelocity[id.x].xyz, newPoints[id.x].a);
	}
} 

[numthreads(1,1,1)]
void clearLogVol(uint3 id : SV_DispatchThreadID) { 
	LogInsertionVolumeRW[id.xyz] = 0.0;
}
 
[numthreads(1,1,1)]
void testData(uint3 id : SV_DispatchThreadID) {
    insert(id.xyz + uint3(0, 10, 0), id.xyz + float3(0, 10, 0), id.xyz + float3(0,10,0), 0.01);
}

